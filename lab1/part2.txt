Task-1
1.  strong entity -> patients, doctors, departments
    weak entity -> hospital rooms, apointments, prescroption
2.
    patient -> {
        patientId - PK simple,
        names - simple,
        birtdates - simple,
        adresses - composite,
        phone-number - multi-valued,
        insuranceInfo - simple

    }
    doctor -> {
        doctorID - PK, simple,
        names - simple,
        specialazation - multi-valued,
        phone-number - simple,
        office-location - simple
    }
    department -> {
        departmentCode - pk, simple,
        names  - simple,
        locaations = simple
    }
    appointment -> {
        apointmentId -> composite PK, 
        dateTime - simple, 
        purposse - simple,
        notes - simple
    }
    prescription -> {
        prescrrpID - pk , simple,
        medication  - simple,
        dosage - simple,
        instructions - simple

    }
    room -> {
        room-numbeer - simple
        deptId - pm, fk simple
    }
3.  Patient–Phone: 1:N (one pattient can have many phones)
    Doctor–Phone: 1:N (one doctor can have many phones)
    Doctor–Specialization: 1:N (one doctor can have multiple specializations)
    Department–Doctor: 1:N (a deparrtment has many doctors, each doctor belongs to one dept)
    Department–Room: 1:N (each deppartment has multiple rooms, room belongs to exactly one dept)
    Patient–Appointment–Doctor: M:N resolved via Appointment entity
    Patient (1:N) Appointment (N:1) Doctor
    Doctor–Prescription–Patient: M:N resolved via Prescription entity
    Doctor (1:N) Prescription (N:1) Patient
4
1. Functional Dependencies
    StudentID → StudentName, StudentMajor
    ProjectID → ProjectTitle, ProjectType, SupervisorID
    SupervisorID → SupervisorName, SupervisorDept
    (StudentID, ProjectID) → Role, HoursWorked, StartDate, EndDate

2.Problems in the Table
    Redundancy
        Student information repeats for every project that the student joins.
        Project information repeats for every student in the same project.
        Supervisor information repeats for every project supervised by the same person.
    Anomalies
        Update anomaly: If a supervisor changes department you must update many rows; inconsistent data can appear.
        Insert anomaly: You cannot add a new project or supervisor unless at least one student is already assigned.
        Delete anomaly: If the last student leaves a project and you delete that row, you lose the project and supervisor data.

3.  First Normal Form (1NF)
        All attributes are atomic; there are no repeating groups.
        The table already satisfies 1NF.
    Second Normal Form (2NF)
        Primary key: (StudentID, ProjectID).
        Partial dependencies:
        StudentID → StudentName, StudentMajor
        ProjectID → ProjectTitle, ProjectType, SupervisorID
        These attributes depend on part of the composite key, so 2NF is violated.
    2NF Decomposition
        Student(StudentID PK, StudentName, StudentMajor)
        Supervisor(SupervisorID PK, SupervisorName, SupervisorDept)
        Project(ProjectID PK, ProjectTitle, ProjectType, SupervisorID FK)
        StudentProject(StudentID FK, ProjectID FK, Role, HoursWorked, StartDate, EndDate)
    
4.2
CourseSchedule(StudentID, StudentMajor, CourseID, CourseName, 
 InstructorID, InstructorName, TimeSlot, Room, Building)
 
1. Primary key is composite(StudentID,CourseID, TimeSlot, Room)
2.  StudentId -> StudentMajor
